<?php

class FDatabase extends PDO
{
    
    /**
    * @var Database $instance \
    */
    public static $instance;
    
    
    public function __construct($DB_TYPE, $DB_HOST, $DB_NAME, $DB_USER, $DB_PASS)
    {
        //parent::__construct($DB_TYPE.':host='.$DB_HOST.';dbname='.$DB_NAME, $DB_USER, $DB_PASS);
        parent::__construct("$DB_TYPE:dbname=$DB_NAME;host=$DB_HOST", $DB_USER, $DB_PASS );

    }
    
    public static function get(){
        if(Database::$instance!==null){
            return Database::$instance;
        }
        else{
            Database::$instance = new Database(FDB_TYPE, FDB_HOST, FDB_NAME, FDB_USER, FDB_PASS);
            
            return Database::$instance;
        }
    }


    /*if page exits*/
	public function is_page($value)
	{
		$results=$this->select('SELECT * FROM pages WHERE name = :page_name and status = 1', array('page_name' => $value));
				
		if ($results) {
			return true;
		}
		else{
			return false;
		}
	}

    /**
    * Counts the records
    * $table , $where, $params
    */
    public function countRecords($table, $where="1", $params=array()){
        $val = $this->select("select count(*) total from ".$table." where " . $where , $params);

        if(isset($val[0]["total"]))
            return $val[0]["total"];
        else
            return 0;
    }
	
    /**
     * select
     * @param string $sql An SQL string
     * @param array $array Paramters to bind
     * @param constant $fetchMode A PDO Fetch mode
     * @return mixed
     */
    public function select($sql, $array = array(), $fetchMode = PDO::FETCH_ASSOC)
    {
        $sth = $this->prepare($sql);
        foreach ($array as $key => $value) {
            $sth->bindValue("$key", $value);
        }
        $sth->execute();
        return $sth->fetchAll($fetchMode);
    }
    
    /**
     * insert
     * @param string $table A name of table to insert into
     * @param string $data An associative array
     */
    public function insert($table, $data)
    {
        ksort($data);

        $fieldNames = implode('", "', array_keys($data));
        $fieldValues = ':' . implode(', :', array_keys($data));
        
        $sth = $this->prepare("INSERT INTO \"$table\" (\"$fieldNames\") VALUES ($fieldValues)");
        
        foreach ($data as $key => $value) {
            
            //this is only specific to postress
            if(is_bool($value))
            {
                if($value)
                    $value="true";
                else
                    $value="false";
            }
            
            $sth->bindValue(":$key", $value);
        }

        $sth->execute();
    }
    
    /**
     * update
     * @param string $table A name of table to insert into
     * @param string $data An associative array
     * @param string $where the WHERE query part
     */
    public function update($table, $data, $where)
    {
        ksort($data);
        
        $fieldDetails = NULL;
        foreach($data as $key=> $value) {
            $fieldDetails .= "\"$key\"=:$key,";
        }
        $fieldDetails = rtrim($fieldDetails, ',');
        
        $sth = $this->prepare("UPDATE $table SET $fieldDetails WHERE $where");
		
		//print_r($sth);
		
		//echo "UPDATE $table SET $fieldDetails WHERE $where";
        
        foreach ($data as $key => $value) {
            //this is only specific to postress
            if(is_bool($value))
            {
                if($value)
                    $value="true";
                else
                    $value="false";
            }
            
            
            $sth->bindValue(":$key", $value);
        }
        
        $sth->execute();
    }
    
    /**
     * delete
     * 
     * @param string $table
     * @param string $where
     * 
     * @return integer Affected Rows
     */
    public function delete($table, $where)
    {
        return $this->exec("DELETE FROM $table WHERE $where");

    }

    /**
     * Display errors
     * call this at the end
     */
    static public function display_errors(){
        echo "<pre>";
        var_dump( Database::$instance->errorInfo() );
        echo "</pre>";
    }

}


